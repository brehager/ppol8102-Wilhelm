legend("topright", legend = levels(iris$Species), col = c("black", "red", "green"), pch = 19, title = "Species")
plot(iris$Sepal.Length, iris$Sepal.Width, col = iris$Species, pch = 19,
xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal Length vs Sepal Width by Species")
species_colors <- c("setosa" = "violet", "versicolor" = "purple", "virginica" = "gold")
abline(a = setosa_intercept, b = setosa_slope, col = "black")
abline(a = virginica_intercept, b = virginica_slope, col = "red")
abline(a = versicolor_intercept, b = versicolor_slope, col = "green")
legend("topright", legend = levels(iris$Species), col = c("black", "red", "green"), pch = 19, title = "Species")
species_colors <- c("setosa" = "violet", "versicolor" = "purple", "virginica" = "gold")
plot(iris$Sepal.Length, iris$Sepal.Width, col = species_colors[iris$Species], pch = 19,
xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal Length vs Sepal Width by Species")
abline(a = setosa_intercept, b = setosa_slope, col = "black")
abline(a = virginica_intercept, b = virginica_slope, col = "red")
abline(a = versicolor_intercept, b = versicolor_slope, col = "green")
legend("topright", legend = levels(iris$Species), col = c("black", "red", "green"), pch = 19, title = "Species")
species_colors <- c("setosa" = "violet", "versicolor" = "purple", "virginica" = "gold")
plot(iris$Sepal.Length, iris$Sepal.Width, col = species_colors[iris$Species], pch = 19,
xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal Length vs Sepal Width by Species")
abline(a = setosa_intercept, b = setosa_slope, col = "violet")
abline(a = virginica_intercept, b = virginica_slope, col = "purple")
abline(a = versicolor_intercept, b = versicolor_slope, col = "gold")
legend("topright", legend = levels(iris$Species), col = c("violet", "gold", "purple"), pch = 19, title = "Species")
species_colors <- c("setosa" = "violet", "versicolor" = "purple", "virginica" = "gold")
plot(iris$Sepal.Length, iris$Sepal.Width, col = species_colors[iris$Species], pch = 19,
xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal Length vs Sepal Width by Species")
abline(a = setosa_intercept, b = setosa_slope, col = "violet")
abline(a = virginica_intercept, b = virginica_slope, col = "purple")
abline(a = versicolor_intercept, b = versicolor_slope, col = "gold")
legend("topright", legend = levels(iris$Species), col = c("violet", "gold", "purple"), pch = 19, title = "Species")
species_colors <- c("setosa" = "violet", "versicolor" = "purple", "virginica" = "gold")
plot(iris$Sepal.Length, iris$Sepal.Width, col = species_colors[iris$Species], pch = 19,
xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal Length vs Sepal Width by Species")
abline(a = setosa_prob4_intercept, b = setosa_prob4_slope, col = "black")
abline(a = virginica_prob4_intercept, b = virginica_prob4_slope, col = "red")
abline(a = versicolor_prob4_intercept, b = versicolor_prob4_slope, col = "green")
legend("topright", legend = levels(iris$Species), col = c("black", "red", "green"), pch = 19, title = "Species")
species_colors <- c("setosa" = "violet", "versicolor" = "purple", "virginica" = "gold")
plot(iris$Sepal.Length, iris$Sepal.Width, col = species_colors[iris$Species], pch = 19,
xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal Length vs Sepal Width by Species")
abline(a = setosa_prob4_intercept, b = setosa_prob4_slope, col = "violet")
abline(a = virginica_prob4_intercept, b = virginica_prob4_slope, col = "gold")
abline(a = versicolor_prob4_intercept, b = versicolor_prob4_slope, col = "purple")
legend("topright", legend = levels(iris$Species), col = c("violet", "gold", "purple"), pch = 19, title = "Species")
data(iris)
mod1 <- lm(Sepal.Length ~ Sepal.Width + Petal.Length, data=iris)
mod2 <- lm(I(Sepal.Length/10) ~ Sepal.Width + Petal.Length, data=iris)
print(summary(mod1))
print(summary(mod2))
data(iris)
mod1 <- lm(Sepal.Length ~ Sepal.Width + Petal.Length, data=iris)
mod2 <- lm(Sepal.Length ~ I(Sepal.Width*10) + Petal.Length, data=iris)
print(summary(mod1))
print(summary(mod2))
mod1 <- lm(Sepal.Length ~ Sepal.Width + Petal.Length, data=iris)
iris$Sepal.Width.std <- (iris$Sepal.Width-mean(iris$Sepal.Width))/sd(iris$Sepal.Width)
iris$Petal.Length.std <- (iris$Petal.Length - mean(iris$Petal.Length))/sd(iris$Petal.Length)
mod2 <- lm(Sepal.Length ~ Sepal.Width.std + Petal.Length.std, data=iris)
summary(mod1)
summary(mod2)
plot(iris$Petal.Width, iris$Sepal.Width, col=iris$Species)
plot(log(iris$Petal.Width+1), iris$Sepal.Width, col=iris$Species)
mod <- lm(Sepal.Width ~ log(Petal.Width+1), data=iris)
plot(log(iris$Petal.Width+1), iris$Sepal.Width, col=iris$Species)
abline(mod)
plot(iris$Petal.Width, iris$Sepal.Width, col=iris$Species)
lines(seq(0,3,length.out=10),
predict(mod,
newdata=data.frame("Petal.Width"=seq(0,3,length.out=10))))
mod <- lm(Sepal.Width ~ Petal.Width + I(Petal.Width^2), data=iris)
plot(iris$Petal.Width, iris$Sepal.Width, col=iris$Species)
lines(seq(0,3,length.out=10),
predict(mod,
newdata=data.frame("Petal.Width"=seq(0,3,length.out=10))))
summary(mod)
data(iris)
species_colors <- c("setosa" = "violet", "versicolor" = "purple", "virginica" = "gold")
plot(iris$Sepal.Length, iris$Sepal.Width,
col = species_colors[iris$Species],
xlab = "Sepal Length",
ylab = "Sepal Width",
main = "Sepal Length vs. Sepal Width (Colored by Species)")
legend("topright", legend = unique(iris$Species),
col = species_colors, pch = 20, cex = 1)
modelA <- lm(Sepal.Width ~ Sepal.Length, data = iris)
summary(modelA)
plot(iris$Sepal.Length, iris$Sepal.Width,
xlab = "Sepal Length",
ylab = "Sepal Width",
main = "Scatterplot of Sepal Length vs. Sepal Width")
abline(modelA, col = "red")
newX <- 3:9
newiris <- data.frame(Sepal.Length = newX)
irispreds <- predict(modelA, newdata = newiris, se.fit = TRUE)
head(irispreds)
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species)
lines(x=newX, y=irispreds$fit, lwd=2)
lines(x=newX, y=irispreds$fit + 1.96 * irispreds$se.fit, lty=2)
lines(x=newX, y=irispreds$fit - 1.96 * irispreds$se.fit, lty=2)
iris$setosa <- ifelse(iris$Species == "setosa", 1, 0)
iris$virginica <- ifelse(iris$Species == "virginica", 1, 0)
modelB <- lm(Sepal.Width ~ Sepal.Length + setosa + virginica, data = iris)
summary(modelB)
cat("Adjusted R-squared for Model A:", summary(modelA)$adj.r.squared, "\n")
cat("Adjusted R-squared for Model B:", summary(modelB)$adj.r.squared, "\n")
setosa_intercept <- 1.67
virginica_intercept <- 0.67
versicolor_intercept <- 0.69
sepal_length_slope <- 0.34988
setosa_intercept <- 1.67
virginica_intercept <- 0.67
species_colors <- c("violet", "purple", "gold")
plot(iris$Sepal.Length, iris$Sepal.Width, col = species_colors[iris$Species],
pch = 20,
cex = 2,
xlab = "Sepal Length", ylab = "Sepal Width")
abline(a = setosa_intercept, b = 0.34988, col = "black", linetype = "solid")
abline(a = virginica_intercept, b = 0.34988, col = "black", linetype = "dashed")
legend("topright", legend = unique(iris$Species),
col = species_colors, pch = 20, cex = 1)
modelC <- lm(Sepal.Width ~ Sepal.Length * Species, data = iris)
summary(modelC)
setosa_interaction_intercept <- -0.57
setosa_interaction_slope <- 0.8
virginica_interaction_intercept <- 0.78
virginica_interaction_slope <- 0.23
versicolor_interaction_intercept <- 0.87
versicolor_interaction_slope <- 0.32
species_colors <- c("setosa" = "violet", "versicolor" = "purple", "virginica" = "gold")
plot(iris$Sepal.Length, iris$Sepal.Width, col = species_colors[iris$Species], pch = 19,
xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal Length vs Sepal Width by Species")
abline(a = setosa_intercept, b = setosa_slope, col = "violet")
abline(a = virginica_intercept, b = virginica_slope, col = "purple")
abline(a = versicolor_intercept, b = versicolor_slope, col = "gold")
legend("topright", legend = levels(iris$Species), col = c("violet", "gold", "purple"), pch = 19, title = "Species")
modelD <- lm(Sepal.Width ~ Sepal.Length + setosa:Sepal.Length + virginica:Sepal.Length, data=iris)
summary(modelD)
setosa_prob4_intercept <- 0.98
setosa_prob4_slope <- 0.327
virginica_prob4_intercept <- 0.79
virginica_prob4_slope <- 0.327
versicolor_prob4_intercept <- 0.79
versicolor_prob4_slope <- 0.33
species_colors <- c("setosa" = "violet", "versicolor" = "purple", "virginica" = "gold")
plot(iris$Sepal.Length, iris$Sepal.Width, col = species_colors[iris$Species], pch = 19,
xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal Length vs Sepal Width by Species")
abline(a = setosa_prob4_intercept, b = setosa_prob4_slope, col = "violet")
abline(a = virginica_prob4_intercept, b = virginica_prob4_slope, col = "gold")
abline(a = versicolor_prob4_intercept, b = versicolor_prob4_slope, col = "purple")
legend("topright", legend = levels(iris$Species), col = c("violet", "gold", "purple"), pch = 19, title = "Species")
load("~/PhD/Data/2024_pdc_s3_ppl_data_anesthesiology.csv")
load("~/PhD/Data/2024_pdc_s3_ppl_data_anesthesiology.csv")
load("~/PhD/Data/2024_pdc_s3_ppl_data_CRNA.xlsx")
load("~/PhD/Data/2022_pdc_s3_ppl_data_CRNA.csv.xlsx")
data <- read.csv("~/PhD/Data/2024_pdc_s3_ppl_data_anesthesiology.csv")
git add git add Codebook_CRNA_Anes_Medicare_013025.Rmd index.html
git add Codebook_CRNA_Anes_Medicare_013025.Rmd index.html
git commit -m "Add codebook to repository" Codebook_CRNA_Anes_Medicare_013025.Rmd index.html
setwd("~/PhD/Data")
setwd("~/GitHub/ppol8102-Wilhelm")
data <- read.csv("2024_pdc_s3_ppl_data_anesthesiology.csv")
data <- read.csv("~/PhD/Data/2024_pdc_s3_ppl_data_anesthesiology.csv")
mean_cost_new <- mean(data$mode_medicare_pricing_for_new_patient, na.rm = TRUE)
median_cost_new <- median(data$mode_medicare_pricing_for_new_patient, na.rm = TRUE)
mean_cost_established <- mean(data$mode_medicare_pricing_for_established_patient, na.rm = TRUE)
median_cost_established <- median(data$mode_medicare_pricing_for_established_patient, na.rm = TRUE)
cat("Observed Mean Cost (New Patients):", mean_cost_new, "\n")
cat("Observed Median Cost (New Patients):", median_cost_new, "\n")
cat("Observed Mean Cost (Established Patients):", mean_cost_established, "\n")
cat("Observed Median Cost (Established Patients):", median_cost_established, "\n")
set.seed(123)  # For reproducibility
n <- 1000
meanlog <- log(mean_cost_new)
sdlog <- 0.5  # Assumed standard deviation
simulated_costs <- rlnorm(n, meanlog, sdlog)
set.seed(123)  # For reproducibility
n_boot <- 1000  # Number of bootstrap samples
n <- length(costs)
n <- 1000
sdlog <- 0.5  # Assumed standard deviation
meanlog <- log(mean_cost_new) - (0.5 * sdlog^2)
simulated_costs <- rlnorm(n, meanlog, sdlog)
costs <- na.omit(data$mode_medicare_pricing_for_new_patient)
# Observed mean and median
observed_mean <- mean(costs)
observed_median <- median(costs)
cat("Observed Mean:", observed_mean, "\n")
cat("Observed Median:", observed_median, "\n")
set.seed(123)  # For reproducibility
n_boot <- 1000  # Number of bootstrap samples
n <- length(costs)
# Bootstrap sampling
bootstrap_medians <- replicate(n_boot, median(sample(costs, n, replace = TRUE)))
bootstrap_means <- replicate(n_boot, mean(sample(costs, n, replace = TRUE)))
ggplot(data.frame(bootstrap_medians), aes(x = bootstrap_medians)) +
geom_histogram(bins = 30, fill = "red", alpha = 0.7) +
labs(title = "Bootstrapped Sampling Distribution of Median Cost", x = "Median Cost (USD)", y = "Frequency")
plot (data.frame(bootstrap_medians), aes(x = bootstrap_medians)) +
geom_histogram(bins = 30, fill = "red", alpha = 0.7) +
labs(title = "Bootstrapped Sampling Distribution of Median Cost", x = "Median Cost (USD)", y = "Frequency")
hist(bootstrap_medians,
breaks = 30,
col = "red",
main = "Bootstrapped Sampling Distribution of Median Cost",
xlab = "Median Cost (USD)",
ylab = "Frequency",
border = "black")
# Histogram of bootstrap means
hist(bootstrap_means,
breaks = 30,
col = "green",
main = "Bootstrapped Sampling Distribution of Mean Cost",
xlab = "Mean Cost (USD)",
ylab = "Frequency",
border = "black")
hist(simulated_costs,
breaks = 30,
col = "blue",
main = "Simulated Distribution of Anesthesia Costs",
xlab = "Cost (USD)",
ylab = "Frequency",
border = "black")
mean_cost_new <- mean(data$mode_medicare_pricing_for_new_patient, na.rm = TRUE)
median_cost_new <- median(data$mode_medicare_pricing_for_new_patient, na.rm = TRUE)
mean_cost_established <- mean(data$mode_medicare_pricing_for_established_patient, na.rm = TRUE)
median_cost_established <- median(data$mode_medicare_pricing_for_established_patient, na.rm = TRUE)
cat("Observed Mean Cost (New Patients):", mean_cost_new, "\n")
cat("Observed Median Cost (New Patients):", median_cost_new, "\n")
cat("Observed Mean Cost (Established Patients):", mean_cost_established, "\n")
cat("Observed Median Cost (Established Patients):", median_cost_established, "\n")
# Simulating Dependent Variable
set.seed(123)
# Log-normal distribution for cost simulation
n <- 1000
sdlog <- 0.5
meanlog <- log(mean_cost_new) - (0.5 * sdlog^2)
simulated_costs <- rlnorm(n, meanlog, sdlog)
# Plot histogram of simulated costs
hist(simulated_costs,
breaks = 30,
col = "blue",
main = "Simulated Distribution of Anesthesia Costs",
xlab = "Cost (USD)",
ylab = "Frequency",
border = "black")
costs <- na.omit(data$mode_medicare_pricing_for_new_patient)
# Observed mean and median
observed_mean <- mean(costs)
observed_median <- median(costs)
cat("Observed Mean:", observed_mean, "\n")
cat("Observed Median:", observed_median, "\n")
set.seed(123)
n_boot <- 10000
n <- length(costs)
# Bootstrap sampling
bootstrap_medians <- replicate(n_boot, median(sample(costs, n, replace = TRUE)))
bootstrap_means <- replicate(n_boot, mean(sample(costs, n, replace = TRUE)))
costs <- na.omit(data$mode_medicare_pricing_for_new_patient)
# Observed mean and median
observed_mean <- mean(costs)
observed_median <- median(costs)
cat("Observed Mean:", observed_mean, "\n")
cat("Observed Median:", observed_median, "\n")
set.seed(123)
n_boot <- 5000
n <- length(costs)
# Bootstrap sampling
bootstrap_medians <- replicate(n_boot, median(sample(costs, n, replace = TRUE)))
costs <- na.omit(data$mode_medicare_pricing_for_new_patient)
# Observed mean and median
observed_mean <- mean(costs)
observed_median <- median(costs)
cat("Observed Mean:", observed_mean, "\n")
cat("Observed Median:", observed_median, "\n")
set.seed(123)
n_boot <- 1000
n <- length(costs)
# Bootstrap sampling
bootstrap_medians <- replicate(n_boot, median(sample(costs, n, replace = TRUE)))
bootstrap_means <- replicate(n_boot, mean(sample(costs, n, replace = TRUE)))
hist(bootstrap_medians,
breaks = 30,
col = "red",
main = "Bootstrapped Sampling Distribution of Median Cost",
xlab = "Median Cost (USD)",
ylab = "Frequency",
border = "black")
# Histogram of bootstrap means
hist(bootstrap_means,
breaks = 30,
col = "green",
main = "Bootstrapped Sampling Distribution of Mean Cost",
xlab = "Mean Cost (USD)",
ylab = "Frequency",
border = "black")
View(data)
View(data)
costs <- na.omit(data$mode_medicare_pricing_for_new_patient)
bootstrap_medians <- replicate(n_boot, median(sample(costs, n, replace = TRUE)))
bootstrap_means <- replicate(n_boot, mean(sample(costs, n, replace = TRUE)))
costs <- na.omit(data$mode_medicare_pricing_for_new_patient)
cat("Observed Mean:", observed_mean, "\n")
cat("Observed Median:", observed_median, "\n")
set.seed(123)
n_boot <- 1000
n <- length(costs)
bootstrap_medians <- replicate(n_boot, median(sample(costs, n, replace = TRUE)))
bootstrap_means <- replicate(n_boot, mean(sample(costs, n, replace = TRUE)))
# ---- Plot Sampling Distributions ----
# Histogram of bootstrap medians
hist(bootstrap_medians,
breaks = 30,
col = "red",
main = "Bootstrapped Sampling Distribution of Median Cost",
xlab = "Median Cost (USD)",
ylab = "Frequency",
border = "black")
# Histogram of bootstrap means
hist(bootstrap_means,
breaks = 30,
col = "green",
main = "Bootstrapped Sampling Distribution of Mean Cost",
xlab = "Mean Cost (USD)",
ylab = "Frequency",
border = "black")
median(sample(costs, n, replace = TRUE))
median(sample(costs, n, replace = TRUE))
median(sample(costs, n, replace = TRUE))
median(sample(costs, n, replace = TRUE))
median(sample(costs, n, replace = TRUE))
median(sample(costs, n, replace = TRUE))
median(sample(costs, n, replace = TRUE))
median(sample(costs, n, replace = TRUE))
median(sample(costs, n, replace = TRUE))
median(sample(costs, n, replace = TRUE))
median(sample(costs, n, replace = TRUE))
median(sample(costs, n, replace = TRUE))
costs
mean(sample(costs, n, replace = TRUE))
mean(sample(costs, n, replace = TRUE))
mean(sample(costs, n, replace = TRUE))
mean(sample(costs, n, replace = TRUE))
mean(sample(costs, n, replace = TRUE))
mean(sample(costs, n, replace = TRUE))
summary(costs)
table(costs)
bootstrap_medians <- replicate(n_boot, median(sample(costs, n, replace = TRUE)))
bootstrap_medians
sample(costs, n, replace = TRUE)
sample(costs, n, replace = TRUE)
sample(costs, n, replace = TRUE)
sample(costs, n, replace = TRUE)
sample(costs, n, replace = TRUE)
bootstrap_medians <- replicate(n_boot, median(sample(costs, 5, replace = TRUE)))
bootstrap_means <- replicate(n_boot, mean(sample(costs, n, replace = TRUE)))
bootstrap_medians
table(costs)
bootstrap_medians <- replicate(n_boot, median(sample(costs, 10, replace = TRUE)))
hist(bootstrap_medians,
breaks = 30,
col = "red",
main = "Bootstrapped Sampling Distribution of Median Cost",
xlab = "Median Cost (USD)",
ylab = "Frequency",
border = "black")
# Histogram of bootstrap means
hist(bootstrap_means,
breaks = 30,
col = "green",
main = "Bootstrapped Sampling Distribution of Mean Cost",
xlab = "Mean Cost (USD)",
ylab = "Frequency",
border = "black")
bootstrap_medians <- replicate(n_boot, median(sample(costs, 1000, replace = TRUE)))
bootstrap_means <- replicate(n_boot, mean(sample(costs, n, replace = TRUE)))
# ---- Plot Sampling Distributions ----
# Histogram of bootstrap medians
hist(bootstrap_medians,
breaks = 30,
col = "red",
main = "Bootstrapped Sampling Distribution of Median Cost",
xlab = "Median Cost (USD)",
ylab = "Frequency",
border = "black")
# Histogram of bootstrap means
hist(bootstrap_means,
breaks = 30,
col = "green",
main = "Bootstrapped Sampling Distribution of Mean Cost",
xlab = "Mean Cost (USD)",
ylab = "Frequency",
border = "black")
bootstrap_medians <- replicate(n_boot, median(sample(costs, 100, replace = TRUE)))
bootstrap_means <- replicate(n_boot, mean(sample(costs, n, replace = TRUE)))
# ---- Plot Sampling Distributions ----
# Histogram of bootstrap medians
hist(bootstrap_medians,
breaks = 30,
col = "red",
main = "Bootstrapped Sampling Distribution of Median Cost",
xlab = "Median Cost (USD)",
ylab = "Frequency",
border = "black")
# Histogram of bootstrap means
hist(bootstrap_means,
breaks = 30,
col = "green",
main = "Bootstrapped Sampling Distribution of Mean Cost",
xlab = "Mean Cost (USD)",
ylab = "Frequency",
border = "black")
bootstrap_medians <- replicate(n_boot, median(sample(costs, 10, replace = TRUE)))
bootstrap_means <- replicate(n_boot, mean(sample(costs, n, replace = TRUE)))
# ---- Plot Sampling Distributions ----
# Histogram of bootstrap medians
hist(bootstrap_medians,
breaks = 30,
col = "red",
main = "Bootstrapped Sampling Distribution of Median Cost",
xlab = "Median Cost (USD)",
ylab = "Frequency",
border = "black")
# Histogram of bootstrap means
hist(bootstrap_means,
breaks = 30,
col = "green",
main = "Bootstrapped Sampling Distribution of Mean Cost",
xlab = "Mean Cost (USD)",
ylab = "Frequency",
border = "black")
mean_cost_new <- mean(data$mode_medicare_pricing_for_new_patient, na.rm = TRUE)
median_cost_new <- median(data$mode_medicare_pricing_for_new_patient, na.rm = TRUE)
mean_cost_established <- mean(data$mode_medicare_pricing_for_established_patient, na.rm = TRUE)
median_cost_established <- median(data$mode_medicare_pricing_for_established_patient, na.rm = TRUE)
cat("Observed Mean Cost (New Patients):", mean_cost_new, "\n")
cat("Observed Median Cost (New Patients):", median_cost_new, "\n")
cat("Observed Mean Cost (Established Patients):", mean_cost_established, "\n")
cat("Observed Median Cost (Established Patients):", median_cost_established, "\n")
# Simulating Dependent Variable
set.seed(123)
n <- 1000
sdlog <- 0.5
meanlog <- log(mean_cost_new) - (0.5 * sdlog^2)
simulated_costs <- rlnorm(n, meanlog, sdlog)
# Histogram of simulated costs
hist(simulated_costs,
breaks = 30,
col = "blue",
main = "Simulated Distribution of Anesthesia Costs",
xlab = "Cost (USD)",
ylab = "Frequency",
border = "black")
# Bootstrapping
costs <- na.omit(data$mode_medicare_pricing_for_new_patient)
cat("Observed Mean:", observed_mean, "\n")
cat("Observed Median:", observed_median, "\n")
set.seed(123)
n_boot <- 1000
n <- length(costs)
bootstrap_medians <- replicate(n_boot, median(sample(costs, 10, replace = TRUE)))
bootstrap_means <- replicate(n_boot, mean(sample(costs, n, replace = TRUE)))
# ---- Plots of Sampling Distributions ----
# Histogram of bootstrap medians
hist(bootstrap_medians,
breaks = 30,
col = "red",
main = "Bootstrapped Sampling Distribution of Median Cost",
xlab = "Median Cost (USD)",
ylab = "Frequency",
border = "black")
# Histogram of bootstrap means
hist(bootstrap_means,
breaks = 30,
col = "green",
main = "Bootstrapped Sampling Distribution of Mean Cost",
xlab = "Mean Cost (USD)",
ylab = "Frequency",
border = "black")
df <- read.csv("Bivariate_analysis.csv")
df <- read.csv(""C:\Users\brean\OneDrive\Documents\PhD\Data\Bivariate anaylsis.xlsx"")
df <- read_excel("C:/Users/brean/OneDrive/Documents/PhD/Data/Bivariate anaylsis.xlsx"
df <- read_excel("C:/Users/brean/OneDrive/Documents/PhD/Data/Bivariate anaylsis.xlsx"
# Install and load the readxl package if not already installed
install.packages("readxl")
library(readxl)
# Read the Excel file
df <- read_excel("C:/Users/brean/OneDrive/Documents/PhD/Data/Bivariate anaylsis.xlsx", sheet = 1)
# Display the first few rows
head(df)
# Clean the data: Remove rows with 'Unknown' in Scope of Practice
df_clean <- df %>%
filter(`Scope.of.Practice` != "Unknown") %>%
mutate(Scope.of.Practice = factor(`Scope.of.Practice`))
install.packages("readxl")
df_clean <- df %>%
filter(`Scope.of.Practice` != "Unknown") %>%
mutate(Scope.of.Practice = factor(`Scope.of.Practice`))
df <- read_excel("C:/Users/brean/OneDrive/Documents/PhD/Data/Bivariate anaylsis.xlsx", sheet = 1)
data$mode_copay_for_established_patient <- as.numeric(data$mode_copay_for_established_patient)
data$mode_copay_for_new_patient <- as.numeric(data$mode_copay_for_new_patient)
data$scope_of_practice <- as.numeric(data$scope_of_practice)
model <- stan_glm(mode_copay_for_established_patient ~ scope_of_practice, data = data)
library(rstanarm)
install.packages("rstanarm")
install.packages("rstanarm")
library(rstanarm)
install.packages("rstanarm")
model <- stan_glm(mode_copay_for_established_patient ~ scope_of_practice, data = data)
library(rstanarm)
install.packages("htmltools")
install.packages("htmltools")
library(rstanarm)
detach("package:htmltools", unload = TRUE)
